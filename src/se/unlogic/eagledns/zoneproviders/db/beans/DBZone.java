package se.unlogic.eagledns.zoneproviders.db.beans;

import java.io.IOException;
import java.util.List;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.xbill.DNS.DClass;
import org.xbill.DNS.Name;
import org.xbill.DNS.Record;
import org.xbill.DNS.SOARecord;
import org.xbill.DNS.Zone;

import se.unlogic.utils.dao.annotations.DAOPopulate;
import se.unlogic.utils.dao.annotations.OneToMany;
import se.unlogic.utils.dao.annotations.PrimaryKey;
import se.unlogic.utils.dao.annotations.Table;
import se.unlogic.utils.xml.Elementable;
import se.unlogic.utils.xml.XMLElement;
import se.unlogic.utils.xml.XMLGenerator;

@XMLElement
@Table(name="zones")
public class DBZone implements Elementable{

	@DAOPopulate
	@PrimaryKey(autoGenerated=true)
	@XMLElement	
	private Integer zoneID;
	
	@DAOPopulate
	@XMLElement
	private String name;
	
	@DAOPopulate
	@XMLElement	
	private String dclass;
	
	@DAOPopulate
	@XMLElement		
	private long ttl;
	
	@DAOPopulate
	@XMLElement		
	private String primaryDNS;
	
	@DAOPopulate
	@XMLElement		
	private String adminEmail;
	
	@DAOPopulate
	@XMLElement		
	private long serial;
	
	@DAOPopulate
	@XMLElement		
	private long refresh;
	
	@DAOPopulate
	@XMLElement	
	private long retry;
	
	@DAOPopulate
	@XMLElement	
	private long expire;
	
	@DAOPopulate
	@XMLElement	
	private long minimum;
	
	@DAOPopulate
	@OneToMany
	@XMLElement	
	private List<DBRecord> records;
	
	@DAOPopulate
	@XMLElement	
	private boolean secondary;
	
	public DBZone() {

		super();
	}
	
	public String getName() {
	
		return name;
	}

	
	public void setName(String name) {
	
		this.name = name;
	}

	
	public String getDclass() {
	
		return dclass;
	}

	
	public void setDclass(String dclass) {
	
		this.dclass = dclass;
	}

	
	public long getTtl() {
	
		return ttl;
	}

	
	public void setTtl(long ttl) {
	
		this.ttl = ttl;
	}

	
	public String getPrimaryDNS() {
	
		return primaryDNS;
	}

	
	public void setPrimaryDNS(String primaryDns) {
	
		this.primaryDNS = primaryDns;
	}

	
	public String getAdminEmail() {
	
		return adminEmail;
	}

	
	public void setAdminEmail(String adminEmail) {
	
		this.adminEmail = adminEmail;
	}

	
	public long getSerial() {
	
		return serial;
	}

	
	public void setSerial(long serial) {
	
		this.serial = serial;
	}

	
	public long getRefresh() {
	
		return refresh;
	}

	
	public void setRefresh(long refresh) {
	
		this.refresh = refresh;
	}

	
	public long getRetry() {
	
		return retry;
	}

	
	public void setRetry(long retry) {
	
		this.retry = retry;
	}

	
	public long getExpire() {
	
		return expire;
	}

	
	public void setExpire(long expire) {
	
		this.expire = expire;
	}

	
	public long getMinimum() {
	
		return minimum;
	}

	
	public void setMinimum(long minimum) {
	
		this.minimum = minimum;
	}

	public List<DBRecord> getRecords() {
		
		return records;
	}

	
	public void setRecords(List<DBRecord> records) {
	
		this.records = records;
	}

	
	public Integer getZoneID() {
	
		return zoneID;
	}

	
	public void setZoneID(Integer zoneID) {
	
		this.zoneID = zoneID;
	}	
	
	public Element toXML(Document doc) {

		return XMLGenerator.toXML(this, doc);
	}

	public Zone toZone() throws IOException{
		
		Name zoneName = Name.fromString(name);
		Name primaryNS = Name.fromString(this.primaryDNS);
		
		SOARecord soaRecord = new SOARecord(zoneName, DClass.value(dclass), ttl, primaryNS, Name.fromString(this.adminEmail), serial, refresh, retry, expire, minimum);
		
		//Record primaryNSRecord = Record.newRecord(primaryNS, Type.NS, DClass.value(dclass), ttl);
		
		int recordCount;
		
		if(this.records != null){
			
			recordCount = 1 + this.records.size();
			
		}else{
			
			recordCount = 1;
		}
		
		Record[] recordArray = new Record[recordCount];
		
		recordArray[0] = soaRecord;
		//recordArray[1] = primaryNSRecord;
		
		if(records != null){
			
			int pos = 1;
			
			for(DBRecord record : this.records){
				
				recordArray[pos] = record.getRecord(ttl,zoneName);
				
				pos++;
			}
		}
		
		return new Zone(zoneName,recordArray);
	}

	
	public boolean isSecondary() {
	
		return secondary;
	}

	
	public void setSecondary(boolean secondary) {
	
		this.secondary = secondary;
	}
}
